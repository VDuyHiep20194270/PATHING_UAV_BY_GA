Function: TournamentSelection(Population, FitnessValues)
Begin:
    TournamentSize = 3  // Tournament size, can change according to need
    TournamentIndices = RandomlySelectIndices(Population, TournamentSize)
    TournamentFitnessValues = GetFitnessValues(TournamentIndices, FitnessValues)
    WinnerIndex = TournamentIndices[IndexOfMinValue(TournamentFitnessValues)]
    return Population[WinnerIndex]
End

Function: Crossover(Parent1, Parent2, CrossoverRate)
    If Random() < CrossoverRate Then
        Child[0] = CreateEmptyArray() # Tạo một mảng con trống
        Child[1] = CreateEmptyArray()

        crossover_point = RandomInteger(1, num_points) # Chọn điểm cắt ngẫu nhiên

        For i = 0 To crossover_point - 1:
            Child[0][i] = Parent1[0][i] # Sao chép phần đầu từ cha mẹ 1
            Child[1][i] = Parent1[1][i]

        For i = crossover_point To num_points:
            Child[0][i] = Parent2[0][i] # Sao chép phần còn lại từ cha mẹ 2
            Child[1][i] = Parent2[1][i]
        Return Child
    Else
        If Random() < 0.5 Then
            Return Parent1
        Else
            Return Parent2
        End If
    End If
End 

Function: Mutate(Individual, BoundMaps, BoundVitesses, MutationRate)
    For j = 1 to Length(individual) step =1 
        individual[j][1]=[Starts[j][1],Starts[j][2],RandomInteger(BoundVitesses[j][1],BoundVitesses[j][2])]
        individual[j][Length(individual[0])]=[Goals[j][1],Goals[j][2],0]
        For i = 2 to Length(individual[0])-1 step =1 
             If Random() < MutationRate then
                    individual[j][i] = [RandomInteger(BoundMaps[j][1][1],BoundMaps[j][1][2]),RandomInteger(BoundMaps[j][2][1],BoundMap[j][2][2]),RandomInteger(BoundVitesses[j][1],BoundVitesses[j][2])]
        End For
    Return individual
End 

Function: Elitism(Population, FitnessValues, Offspring, OffspringFitnessValues):
    CombinedPopulation = Concatenate(Population, Offspring)
    CombinedFitnessValues = Concatenate(FitnessValues, OffspringFitnessValues)
    SortedIndices = Argsort(CombinedFitnessValues)
    NewPopulation = []
    NewFitnessValues = []
    for i=1 to i= len(Population) step=1
        NewPopulation.Append(CombinedPopulation[SortedIndices[i]])
        NewFitnessValues.Append(CombinedFitnessValues[SortedIndices[i]])
    Return NewPopulation, NewFitnessValues

Function: GeneticAlgorithm(NumberIndividuals, NumberUAVs, NumberPoints,Start, Goal, MutationRate, CrossoverRate,BoundMaps,BoundVitesses)
Input: NumberIndividuals: number of individuals in the population
       NumberUAVs: number of UAV in an individual 
       NumberPoints: UAV points are considered for UAV to pass through
       Starts: start points of UAVs
       Goals: goal points of UAVs
       MutationRate: the rate Mutation of Individuals
       CrossoverRate :the rate Crossover between two parent
       BoundMaps : Bounds of UAVs on map, BoundMaps[NumberUAVs][1] is array of min and max of xNumberUAVs, BoundMaps[NumberUAVs][2] is array of min and max of yNumberUAVsUAV
       BoundVitesses : Bounds of Vitesse of UAVs,BoundVitesses[NumberUAVs][1] is min VitesseNumberUAVs , BoundVitesses[NumberUAVs][2] is max VitesseNumberUAVs-
Output:OptimalRoute:=[[(xNumberPoints,yNumberPoints,vNumberPoints)]NumberUAVs]
Begin:
    for i=1 to i=NumberIndividuals step 1  
        for j=1 to j=NumberUAVs step 1
            Population[i][j][1]=[Starts[j][1],Starts[j][2],RandomInteger(BoundVitesses[j][1],BoundVitesses[j][2])]
            Population[i][j][1]=[Goals[j][1],Goals[j][2],0]
            for k=2 to k=NumberPoints-1 step 1
                Population[i][j][k]=[RandomInteger(BoundMaps[j][1][1],BoundMaps[j][1][2]),RandomInteger(BoundMaps[j][2][1],BoundMap[j][2][2]),RandomInteger(BoundVitesses[j][1],BoundVitesses[j][2])]
            end for
        end for
        FitnessValues[i]=EvaluateFitness(Population[i])
    end for
    OptimalRoute=Population[1]
    Iteration=0
    while Iteration < IterationMax and IterationsNoImprove < 50 
        for i=1 to i=NumberIndividuals step 1
            Parent1 = TournamentSelection(Population, FitnessValues)
            Parent2 = TournamentSelection(Population, FitnessValues)
            Child = Crossover(parent1, parent2, CrossoverRate)
            Child = Mutate(Child, BoundMaps,BoundVitesses, MutationRate)
            Offspring[i] = Child
        end for
        Population = elitism (Population,Offspring)
        for i=1 to i=NumberIndividuals step 1
            FitnessValues[i]=EvaluateFitness(Population[i])
        end for 
        if EvaluateFitness(OptimalRoute) > EvaluateFitness(Population[1]) then
            OptimalRoute = Population[1]
        else 
            IterationsNoImprove = IterationsNoImprove + 1
        end if
    end while
End 

